<template>
    <view class="tab-bar {{userClass}}">
        <view wx:for="{{navbarList}}" wx:for-item="item" wx:for-index="index" wx:key="{{index}}"
            class="tab-item {{currentTabIndex === index ? 'tab-active' : ''}}" @tap="bindNavbarTap"
            data-index="{{index}}" data-item="{{item}}"
            style="color: {{currentTabIndex === index ? themeColor : '#333'}}">
            {{ item.name }}
            <view wx:if="{{needBottomLine && currentTabIndex === index}}" class="tab-border"
                style="border-bottom: {{needBottomLine && currentTabIndex === index ? borderBottomColor : ''}}" />
        </view>
    </view>
</template>

<style lang="less" src="./BaseTab.less"></style>


<script>
import wepy from 'wepy';
import { connect } from 'wepy-redux';
import CommonFunc from 'utils/common-func';

@connect(
    {
        gender(state) {
            return state.userInfo.gender;
        }
    },
    {}
)
export default class BaseTab extends wepy.component {
    props = {
        navbarList: {
            type: Array,
            default: []
        },
        userClass: {
            type: String,
            default: ''
        },
        needBottomLine: {
            type: Boolean,
            default: true
        },
        initIndex: {
            type: Number,
            default: 0
        }
    };

    data = {
        themeColor: '#ff85bc',
        currentTabIndex: 0
    };

    onLoad() {
        this.currentTabIndex = this.initIndex;
        this.themeColor = CommonFunc.setThemeColor(this.gender);
        this.$apply();
    }

    computed = {
        borderBottomColor() {
            return `4rpx solid ${this.themeColor}`;
        }
    };

    watch = {
        initIndex(newVal) {
            this.currentTabIndex = newVal;
            this.$apply();
        },
        gender(newVal) {
            this.themeColor = CommonFunc.setThemeColor(newVal);
            this.$apply();
        }
    };

    methods = {
        bindNavbarTap(e) {
            const data = e.currentTarget.dataset;
            if (data.item.disabled) return;
            this.currentTabIndex = data.index || 0;

            this.$emit('tabChange', {
                index: data.index,
                item: this.navbarList[data.index]
            });
        },
        setInitIndex(index) {
            this.currentTabIndex = index;
        }
    };
}
</script>
